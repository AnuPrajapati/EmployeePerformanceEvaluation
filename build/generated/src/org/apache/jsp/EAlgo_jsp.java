package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class EAlgo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("<!DOCTYPE html>\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<style>\n");
      out.write("html, body {\n");
      out.write("\theight: 100%;\n");
      out.write("}\n");
      out.write("\n");
      out.write("body {\n");
      out.write("\tmargin: 0;\n");
      out.write("\tpadding: 0;\n");
      out.write("\toverflow: hidden;\n");
      out.write("\tfont-size: 12px;\n");
      out.write("\tfont-family: Arial, sans-serif;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#maindiv {\n");
      out.write("\twidth: 960px;\n");
      out.write("\theight: 380px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".dataset-a, .dataset-b {\n");
      out.write("\tdisplay: inline-block;\n");
      out.write("\twidth: 400px;\n");
      out.write("\tpadding: 0 0 0 50px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#button {\n");
      out.write("\tmargin: 20px 50px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#error {\n");
      out.write("\tmargin: 20px 50px;\n");
      out.write("\tfont-size: 20px;\n");
      out.write("\tcolor: red;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<body>\n");
      out.write("    <script src=\"Contents/js/moebio_framework.min.js\" type=\"text/javascript\"></script>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\tvar uniform = [0.2334, 0.4229, 0.2938, 0.9500, 0.3745, 0.3985, 0.3158, 0.4228, 0.2844, 0.3871, 0.5104, 0.3336, 0.2984, 0.2859, 0.4372, 0.8939, 0.4119, 0.5078, 0.9713, 0.3784, 0.3209, 0.3385, 0.5550, 0.5868, 0.3276, 0.8119, 0.7752, 0.9800, 0.5759, 0.3898, 0.4301, 0.3909, 0.4792, 0.4215, 0.6487, 0.0861, 0.1373, 0.1443, 0.2952, 0.2803, 0.1996, 0.1195, 0.1100, 0.0133, 0.2272, 0.2399, 0.1183, 0.1424, 0.1873, 0.1649, 0.8907, 0.9081, 0.8240, 0.8495, 0.9040, 0.7813, 0.6995, 0.8918, 0.8165, 0.9883];\n");
      out.write("\tvar clustered = [0.5249, 0.6735, 0.5593, 0.4187, 0.6349, 0.4788, 0.4559, 0.4861, 0.5759, 0.4410, 0.5357, 0.4725, 0.6527, 0.4988, 0.3397, 0.4526, 0.4674, 0.6161, 0.5081, 0.5519, 0.5172, 0.5021, 0.4984, 0.5105, 0.8681, 0.7942, 0.8389, 0.8748, 0.8194, 0.9015, 0.8505, 0.7642, 0.9134, 0.8259, 0.8268, 0.7230, 0.8689, 0.8446, 0.7744, 0.8332, 0.8390, 0.8287, 0.1935, 0.2151, 0.0994, 0.1380, 0.1832, 0.1630, 0.1317, 0.1394, 0.2956, 0.2004, 0.1353, 0.2359, 0.1413, 0.1669, 0.1399, 0.1719, 0.1799, 0.1672];\n");
      out.write("\tvar elbowData = {};\n");
      out.write("\tvar maxK = 10;\n");
      out.write("\tvar newData = false;\n");
      out.write("\tvar g;\n");
      out.write("\n");
      out.write("\tfunction computeData() {\n");
      out.write("\t\t// Reset elbowData\n");
      out.write("\t\telbowData = {};\n");
      out.write("                \n");
      out.write("\n");
      out.write("\t\tuniformNL = mo.NumberList.fromArray(uniform);\n");
      out.write("\t\tclusteredNL = mo.NumberList.fromArray(clustered);\n");
      out.write("\n");
      out.write("\t\t// Compute k-means clusters for k from 1 to 10, and populate the elbowData\n");
      out.write("\t\t// for each dataset and each value of k\n");
      out.write("\t\tfor (var k = 1; k <= maxK; ++k) {\n");
      out.write("\t\t\tuniformKMeans = mo.NumberListOperators.linearKMeans(uniformNL, k);\n");
      out.write("\t\t\tclusteredKMeans = mo.NumberListOperators.linearKMeans(clusteredNL, k);\n");
      out.write("\n");
      out.write("\t\t\tfunction SSE(datasetName, numClusters) {\n");
      out.write("\t\t\t\treturn function(dataset) {\n");
      out.write("\t\t\t\t\t// Sum up the sum of squared errors for each cluster\n");
      out.write("\t\t\t\t\tsse = 0;\n");
      out.write("\t\t\t\t\tfor (var c = 0; c < dataset.length; ++c) {\n");
      out.write("\t\t\t\t\t\tmean = dataset[c].getAverage();\n");
      out.write("\t\t\t\t\t\tsse += dataset[c].subtract(mean).pow(2).getNorm();\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\telbowData[datasetName] = elbowData[datasetName] || [];\n");
      out.write("\t\t\t\t\telbowData[datasetName].push([numClusters, sse]);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Compute sum of squared errors for each cluster\n");
      out.write("\t\t\tSSE('uniform', k)(uniformKMeans);\n");
      out.write("\t\t\tSSE('clustered', k)(clusteredKMeans);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction drawNumberLine(g, dataset, label, offset) {\n");
      out.write("\t\tvar lineLen = 350;\n");
      out.write("\t\tvar tickLen = 5;\n");
      out.write("\t\tvar x = 50 + (offset || 0);\n");
      out.write("\t\tvar y = 80;\n");
      out.write("\t\tvar radius = 5;\n");
      out.write("\n");
      out.write("\t\tvar min = 0;\n");
      out.write("\t\tvar max = 1;\n");
      out.write("\n");
      out.write("\t\tif (newData) {\n");
      out.write("\t\t\tmin = mo.NumberList.fromArray(dataset).getMin();\n");
      out.write("\t\t\tmax = mo.NumberList.fromArray(dataset).getMax();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar range = max - min;\n");
      out.write("\n");
      out.write("\t\tg.setStroke('#777');\n");
      out.write("\t\tg.setFill('rgba(125,125,125,0.5)');\n");
      out.write("\n");
      out.write("\t\t// x-axis\n");
      out.write("\t\tg.line(x, y, x + lineLen, y);\n");
      out.write("\t\t// Ticks\n");
      out.write("\t\tg.line(x, y, x, y + tickLen);\n");
      out.write("\t\tg.line(x + lineLen / 2, y, x + lineLen / 2, y + tickLen);\n");
      out.write("\t\tg.line(x + lineLen, y, x + lineLen, y + tickLen);\n");
      out.write("\n");
      out.write("\t\t// Draw each data point\n");
      out.write("\t\tdataset.forEach(function(d) {\n");
      out.write("\t\t\tg.fCircle(x + ((d - min) / range) * lineLen, y - 1.5 * radius, radius);\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t\t// Labels\n");
      out.write("\t\tg.setText('#555', 12, 'Arial', \"center\");\n");
      out.write("\t\tg.fText(min.toFixed(2), x, y + tickLen);\n");
      out.write("\t\tg.fText(((min + max) / 2).toFixed(2), x + lineLen / 2, y + tickLen);\n");
      out.write("\t\tg.fText(max.toFixed(2), x + lineLen, y + tickLen);\n");
      out.write("\n");
      out.write("\t\tg.setText('#555', 16, 'Arial', 'center', 'bottom', 'bold');\n");
      out.write("\t\tg.fText(label, x + lineLen / 2, y - 4 * radius);\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction drawElbowChart(g, datasetName, offset) {\n");
      out.write("\t\tvar xLineLen = 350;\n");
      out.write("\t\tvar yLineLen = 200;\n");
      out.write("\t\tvar tickLen = 5;\n");
      out.write("\t\tvar x = 50 + (offset || 0);\n");
      out.write("\t\tvar y = 130;\n");
      out.write("\t\tvar elbow = elbowData[datasetName];\n");
      out.write("\t\tvar sseMax = elbow.map(function(pair) { return pair[1] });\n");
      out.write("\t\tsseMax = mo.NumberList.fromArray(sseMax).getMax();\n");
      out.write("\n");
      out.write("\t\tg.setStroke(\"#777\");\n");
      out.write("\n");
      out.write("\t\t// Draw axes\n");
      out.write("\t\tg.line(x, y + yLineLen, x + xLineLen, y + yLineLen);\n");
      out.write("\t\tg.line(x, y + yLineLen, x, y)\n");
      out.write("\n");
      out.write("\t\t// x-axis ticks and labels\n");
      out.write("\t\tfor (var i = 1; i <= maxK; ++i) {\n");
      out.write("\t\t\tvar xTick = Math.floor((i / maxK) * xLineLen);\n");
      out.write("\t\t\tg.line(x + xTick, y + yLineLen, x + xTick, y + yLineLen + tickLen);\n");
      out.write("\t\t\tg.setText('#555', 12, 'Arial', \"center\");\n");
      out.write("\t\t\tg.fText(i, x + xTick, y + yLineLen + tickLen);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Axis title\n");
      out.write("\t\tg.fText(\"Number of clusters (k)\", x + xLineLen / 2, y + yLineLen + tickLen + 12);\n");
      out.write("\t\tg.fTextRotated(\"Sum of squared errors\", x - 16, y + yLineLen / 2, -Math.PI / 2);\n");
      out.write("\n");
      out.write("\t\tg.setStroke(\"#333\");\n");
      out.write("\n");
      out.write("\t\t// Draw sum of square errors\n");
      out.write("\t\tfor (var i = 1; i < elbow.length; ++i) {\n");
      out.write("\t\t\tvar a = elbow[i - 1];\n");
      out.write("\t\t\tvar b = elbow[i];\n");
      out.write("\t\t\tvar xA = (a[0] / maxK) * xLineLen + x;\n");
      out.write("\t\t\tvar yA = (1 - a[1] / sseMax) * yLineLen + y;\n");
      out.write("\t\t\tvar xB = (b[0] / maxK) * xLineLen + x;\n");
      out.write("\t\t\tvar yB = (1 - b[1] / sseMax) * yLineLen + y;\n");
      out.write("\t\t\tg.line(xA, yA, xB, yB);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction setup() {\n");
      out.write("\t\tg = new mo.Graphics({\n");
      out.write("\t\t\tcontainer: \"#maindiv\",\n");
      out.write("\t\t\tdimensions: {\n");
      out.write("\t\t\t\twidth: 960,\n");
      out.write("\t\t\t\theight: 380\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tinit: computeData,\n");
      out.write("\t\t\tcycle: function() {\n");
      out.write("\t\t\t\tthis.setText('#555', 18, 'Arial', 'center', 'bottom', 'bold');\n");
      out.write("\t\t\t\tthis.fText(\"K-means clustering SSE vs. number of clusters for two random datasets\", 450, 20);\n");
      out.write("\t\t\t\tthis.setStroke(\"#aaa\");\n");
      out.write("\t\t\t\tthis.line(150, 25, 750, 25);\n");
      out.write("\t\t\t\tdrawNumberLine(this, clustered, \"Dataset A\");\n");
      out.write("\t\t\t\tdrawNumberLine(this, uniform, \"Dataset B\", 450);\n");
      out.write("\t\t\t\tdrawElbowChart(this, 'clustered');\n");
      out.write("\t\t\t\tdrawElbowChart(this, 'uniform', 450);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t});\n");
      out.write("\t\tg.setBackgroundColor('white');\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction inputChange() {\n");
      out.write("\t\tfunction parseInput(id) {\n");
      out.write("\t\t\tinput = document.getElementById(\"input-\" + id);\n");
      out.write("\t\t\tvalue = input.value;\n");
      out.write("\n");
      out.write("\t\t\tdataset = value.split(\",\").map(function(d) {\n");
      out.write("\t\t\t\tval = Number(d);\n");
      out.write("\t\t\t\tif (isNaN(val) || !isFinite(val) || d.trim().length === 0) {\n");
      out.write("\t\t\t\t\tthrow \"Error parsing Dataset \" + id.toUpperCase();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\treturn val;\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\tif (id == \"a\") {\n");
      out.write("\t\t\t\tclustered = dataset;\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tuniform = dataset;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\ttry {\n");
      out.write("\t\t\tvar id = \"a\";\n");
      out.write("\t\t\tparseInput(id);\n");
      out.write("\t\t\tid = \"b\";\n");
      out.write("\t\t\tparseInput(id);\n");
      out.write("\n");
      out.write("\t\t\tcomputeData();\n");
      out.write("\n");
      out.write("\t\t\tnewData = true;\n");
      out.write("\n");
      out.write("\t\t\tvar errorDiv = document.getElementById('error');\n");
      out.write("\t\t\terror.innerHTML = \"\";\n");
      out.write("\t\t} catch (e) {\n");
      out.write("\t\t\tvar errorDiv = document.getElementById('error');\n");
      out.write("\t\t\terror.innerHTML = e;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\twindow.onload = function() {\n");
      out.write("\t\tvar inputA = document.getElementById('input-a');\n");
      out.write("\t\tvar inputB = document.getElementById('input-b');\n");
      out.write("\t\t\n");
      out.write("\t\tinputA.value = clustered.join(\", \");\n");
      out.write("\t\tinputB.value = uniform.join(\", \");\n");
      out.write("\n");
      out.write("\t\tsetup();\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("<div id=\"maindiv\"></div>\n");
      out.write("<div class=\"dataset-a\">\n");
      out.write("\tDataset A: <input type=\"text\" id=\"input-a\" size=\"45\">\n");
      out.write("</div>\n");
      out.write("<div class=\"dataset-b\">\n");
      out.write("\tDataset B: <input type=\"text\" id=\"input-b\" size=\"45\">\n");
      out.write("</div>\n");
      out.write("<div id=\"button\">\n");
      out.write("\t<button type=\"button\" onclick=\"inputChange()\">Parse datasets</button>\n");
      out.write("</div>\n");
      out.write("<div id=\"error\"></div>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
